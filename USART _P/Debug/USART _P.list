
USART _P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000320  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004c8  080004c8  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004c8  080004c8  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004c8  080004c8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c8  080004c8  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004cc  080004cc  000014cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004d0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000004  080004d4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080004d4  0000208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010a4  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000051c  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  000035f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015e  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001596  00000000  00000000  00003936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001edd  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080228  00000000  00000000  00006da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00086fd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  00087014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000875cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800049c 	.word	0x0800049c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800049c 	.word	0x0800049c

080001d4 <main>:
void usart2_write(char ch);
void usart2_print(const char *str);
void USART2_IRQHandler(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    usart2_init();
 80001d8:	f000 f802 	bl	80001e0 <usart2_init>

    while (1)
 80001dc:	bf00      	nop
 80001de:	e7fd      	b.n	80001dc <main+0x8>

080001e0 <usart2_init>:
        // Main loop can be empty, UART handled in ISR
    }
}

void usart2_init(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
    // 1. Enable GPIOA and USART2 clocks
    RCC_AHB1ENR |= (1 << 0);      // GPIOA clock enable
 80001e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000254 <usart2_init+0x74>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000254 <usart2_init+0x74>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR |= (1 << 17);     // USART2 clock enable
 80001f0:	4b19      	ldr	r3, [pc, #100]	@ (8000258 <usart2_init+0x78>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a18      	ldr	r2, [pc, #96]	@ (8000258 <usart2_init+0x78>)
 80001f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001fa:	6013      	str	r3, [r2, #0]

    // 2. Configure PA2 and PA3 to AF mode (10)
    GPIOA_MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2)));
 80001fc:	4b17      	ldr	r3, [pc, #92]	@ (800025c <usart2_init+0x7c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a16      	ldr	r2, [pc, #88]	@ (800025c <usart2_init+0x7c>)
 8000202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000206:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |= ((2 << (2 * 2)) | (2 << (3 * 2)));
 8000208:	4b14      	ldr	r3, [pc, #80]	@ (800025c <usart2_init+0x7c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a13      	ldr	r2, [pc, #76]	@ (800025c <usart2_init+0x7c>)
 800020e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000212:	6013      	str	r3, [r2, #0]

    // 3. Set AF7 (USART2) for PA2 and PA3
    GPIOA_AFRL &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000214:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <usart2_init+0x80>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a11      	ldr	r2, [pc, #68]	@ (8000260 <usart2_init+0x80>)
 800021a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800021e:	6013      	str	r3, [r2, #0]
    GPIOA_AFRL |= ((7 << (4 * 2)) | (7 << (4 * 3)));
 8000220:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <usart2_init+0x80>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <usart2_init+0x80>)
 8000226:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800022a:	6013      	str	r3, [r2, #0]

    // 4. Set baud rate for 9600 @ 16 MHz PCLK
    USART2_BRR = 0x683;
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <usart2_init+0x84>)
 800022e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000232:	601a      	str	r2, [r3, #0]

    // 5. Enable RXNEIE (RX interrupt), UE, TE, RE
    USART2_CR1 = (1 << 13) | (1 << 3) | (1 << 2) | (1 << 5);
 8000234:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <usart2_init+0x88>)
 8000236:	f242 022c 	movw	r2, #8236	@ 0x202c
 800023a:	601a      	str	r2, [r3, #0]

    // 6. Enable USART2 interrupt in NVIC
    NVIC_ISER1 |= (1 << (USART2_IRQn - 32)); // USART2_IRQn = 38
 800023c:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <usart2_init+0x8c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0a      	ldr	r2, [pc, #40]	@ (800026c <usart2_init+0x8c>)
 8000242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000246:	6013      	str	r3, [r2, #0]
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40023840 	.word	0x40023840
 800025c:	40020000 	.word	0x40020000
 8000260:	40020020 	.word	0x40020020
 8000264:	40004408 	.word	0x40004408
 8000268:	4000440c 	.word	0x4000440c
 800026c:	e000e104 	.word	0xe000e104

08000270 <usart2_write>:

void usart2_write(char ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
    while (!(USART2_SR & (1 << 7))); // Wait for TXE
 800027a:	bf00      	nop
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <usart2_write+0x2c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f9      	beq.n	800027c <usart2_write+0xc>
    USART2_DR = (ch & 0xFF);
 8000288:	4a05      	ldr	r2, [pc, #20]	@ (80002a0 <usart2_write+0x30>)
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40004400 	.word	0x40004400
 80002a0:	40004404 	.word	0x40004404

080002a4 <usart2_print>:

void usart2_print(const char *str)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    while (*str)
 80002ac:	e006      	b.n	80002bc <usart2_print+0x18>
    {
        usart2_write(*str++);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	1c5a      	adds	r2, r3, #1
 80002b2:	607a      	str	r2, [r7, #4]
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ffda 	bl	8000270 <usart2_write>
    while (*str)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f4      	bne.n	80002ae <usart2_print+0xa>
    }
}
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <USART2_IRQHandler>:

// USART2 Interrupt Service Routine
void USART2_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
    if (USART2_SR & (1 << 5)) // RXNE set
 80002d6:	4b19      	ldr	r3, [pc, #100]	@ (800033c <USART2_IRQHandler+0x6c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d027      	beq.n	8000332 <USART2_IRQHandler+0x62>
    {
        char c = USART2_DR & 0xFF; // Read data
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <USART2_IRQHandler+0x70>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]

        usart2_write(c); // Echo back
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ffc0 	bl	8000270 <usart2_write>

        if (c == '\r')  // Enter key pressed
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	2b0d      	cmp	r3, #13
 80002f4:	d111      	bne.n	800031a <USART2_IRQHandler+0x4a>
        {
            buffer[i] = '\0'; // Null-terminate
 80002f6:	4b13      	ldr	r3, [pc, #76]	@ (8000344 <USART2_IRQHandler+0x74>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a13      	ldr	r2, [pc, #76]	@ (8000348 <USART2_IRQHandler+0x78>)
 80002fc:	2100      	movs	r1, #0
 80002fe:	54d1      	strb	r1, [r2, r3]
            usart2_print("\r\nYou typed: ");
 8000300:	4812      	ldr	r0, [pc, #72]	@ (800034c <USART2_IRQHandler+0x7c>)
 8000302:	f7ff ffcf 	bl	80002a4 <usart2_print>
            usart2_print(buffer);
 8000306:	4810      	ldr	r0, [pc, #64]	@ (8000348 <USART2_IRQHandler+0x78>)
 8000308:	f7ff ffcc 	bl	80002a4 <usart2_print>
            usart2_print("\r\n");
 800030c:	4810      	ldr	r0, [pc, #64]	@ (8000350 <USART2_IRQHandler+0x80>)
 800030e:	f7ff ffc9 	bl	80002a4 <usart2_print>
            i = 0; // Reset index
 8000312:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <USART2_IRQHandler+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
        else if (i < BUFFER_SIZE - 1)
        {
            buffer[i++] = c; // Store char
        }
    }
}
 8000318:	e00b      	b.n	8000332 <USART2_IRQHandler+0x62>
        else if (i < BUFFER_SIZE - 1)
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <USART2_IRQHandler+0x74>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b62      	cmp	r3, #98	@ 0x62
 8000320:	dc07      	bgt.n	8000332 <USART2_IRQHandler+0x62>
            buffer[i++] = c; // Store char
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <USART2_IRQHandler+0x74>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	4906      	ldr	r1, [pc, #24]	@ (8000344 <USART2_IRQHandler+0x74>)
 800032a:	600a      	str	r2, [r1, #0]
 800032c:	4906      	ldr	r1, [pc, #24]	@ (8000348 <USART2_IRQHandler+0x78>)
 800032e:	79fa      	ldrb	r2, [r7, #7]
 8000330:	54ca      	strb	r2, [r1, r3]
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40004400 	.word	0x40004400
 8000340:	40004404 	.word	0x40004404
 8000344:	20000084 	.word	0x20000084
 8000348:	20000020 	.word	0x20000020
 800034c:	080004b4 	.word	0x080004b4
 8000350:	080004c4 	.word	0x080004c4

08000354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <NMI_Handler+0x4>

0800035c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <HardFault_Handler+0x4>

08000364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <MemManage_Handler+0x4>

0800036c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <BusFault_Handler+0x4>

08000374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <UsageFault_Handler+0x4>

0800037c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003aa:	f000 f83f 	bl	800042c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <SystemInit+0x20>)
 80003ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003be:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <SystemInit+0x20>)
 80003c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000410 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003dc:	f7ff ffea 	bl	80003b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e0:	480c      	ldr	r0, [pc, #48]	@ (8000414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003e2:	490d      	ldr	r1, [pc, #52]	@ (8000418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003e4:	4a0d      	ldr	r2, [pc, #52]	@ (800041c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000406:	f000 f825 	bl	8000454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800040a:	f7ff fee3 	bl	80001d4 <main>
  bx  lr    
 800040e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000410:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800041c:	080004d0 	.word	0x080004d0
  ldr r2, =_sbss
 8000420:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000424:	2000008c 	.word	0x2000008c

08000428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC_IRQHandler>
	...

0800042c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <HAL_IncTick+0x20>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <HAL_IncTick+0x24>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4413      	add	r3, r2
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <HAL_IncTick+0x24>)
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	20000000 	.word	0x20000000
 8000450:	20000088 	.word	0x20000088

08000454 <__libc_init_array>:
 8000454:	b570      	push	{r4, r5, r6, lr}
 8000456:	4d0d      	ldr	r5, [pc, #52]	@ (800048c <__libc_init_array+0x38>)
 8000458:	4c0d      	ldr	r4, [pc, #52]	@ (8000490 <__libc_init_array+0x3c>)
 800045a:	1b64      	subs	r4, r4, r5
 800045c:	10a4      	asrs	r4, r4, #2
 800045e:	2600      	movs	r6, #0
 8000460:	42a6      	cmp	r6, r4
 8000462:	d109      	bne.n	8000478 <__libc_init_array+0x24>
 8000464:	4d0b      	ldr	r5, [pc, #44]	@ (8000494 <__libc_init_array+0x40>)
 8000466:	4c0c      	ldr	r4, [pc, #48]	@ (8000498 <__libc_init_array+0x44>)
 8000468:	f000 f818 	bl	800049c <_init>
 800046c:	1b64      	subs	r4, r4, r5
 800046e:	10a4      	asrs	r4, r4, #2
 8000470:	2600      	movs	r6, #0
 8000472:	42a6      	cmp	r6, r4
 8000474:	d105      	bne.n	8000482 <__libc_init_array+0x2e>
 8000476:	bd70      	pop	{r4, r5, r6, pc}
 8000478:	f855 3b04 	ldr.w	r3, [r5], #4
 800047c:	4798      	blx	r3
 800047e:	3601      	adds	r6, #1
 8000480:	e7ee      	b.n	8000460 <__libc_init_array+0xc>
 8000482:	f855 3b04 	ldr.w	r3, [r5], #4
 8000486:	4798      	blx	r3
 8000488:	3601      	adds	r6, #1
 800048a:	e7f2      	b.n	8000472 <__libc_init_array+0x1e>
 800048c:	080004c8 	.word	0x080004c8
 8000490:	080004c8 	.word	0x080004c8
 8000494:	080004c8 	.word	0x080004c8
 8000498:	080004cc 	.word	0x080004cc

0800049c <_init>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr

080004a8 <_fini>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr
